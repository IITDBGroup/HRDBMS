package com.exascale.misc;

import java.nio.ByteBuffer;
import net.jpountz.lz4.LZ4Compressor;
import net.jpountz.lz4.LZ4Factory;
import net.jpountz.lz4.LZ4FastDecompressor;

public class BWTTest
{
	public static void main(final String[] args)
	{
		final ByteBuffer data = ByteBuffer.allocate(128 * 3 * 1024);
		int i = 0;
		while (i < 128 * 3 * 256)
		{
			data.putInt(i++);
		}

		final LZ4Factory factory = LZ4Factory.nativeInstance();
		final LZ4Compressor fast = factory.fastCompressor();
		final LZ4Compressor hc = factory.highCompressor();
		long start = System.currentTimeMillis();
		byte[] outData = fast.compress(data.array());
		long end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4 and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		outData = fast.compress(data.array());
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4 and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		outData = fast.compress(data.array());
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4 and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		outData = fast.compress(data.array());
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4 and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		outData = hc.compress(data.array());
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4-HC and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		outData = hc.compress(data.array());
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4-HC and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		outData = hc.compress(data.array());
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4-HC and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		outData = hc.compress(data.array());
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4-HC and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		final byte[] temp = new byte[128 * 3 * 1024];
		final BWT bwt = new BWT(0);
		start = System.currentTimeMillis();
		bwt.forward(new IndexedByteArray(data.array(), 0), new IndexedByteArray(temp, 0));
		outData = fast.compress(temp);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4-BWT and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		bwt.forward(new IndexedByteArray(data.array(), 0), new IndexedByteArray(temp, 0));
		outData = fast.compress(temp);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4-BWT and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		bwt.forward(new IndexedByteArray(data.array(), 0), new IndexedByteArray(temp, 0));
		outData = fast.compress(temp);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4-BWT and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		bwt.forward(new IndexedByteArray(data.array(), 0), new IndexedByteArray(temp, 0));
		outData = fast.compress(temp);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4-BWT and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		bwt.forward(new IndexedByteArray(data.array(), 0), new IndexedByteArray(temp, 0));
		outData = hc.compress(temp);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4-HC-BWT and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		bwt.forward(new IndexedByteArray(data.array(), 0), new IndexedByteArray(temp, 0));
		outData = hc.compress(temp);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4-HC-BWT and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		bwt.forward(new IndexedByteArray(data.array(), 0), new IndexedByteArray(temp, 0));
		outData = hc.compress(temp);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4-HC-BWT and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		start = System.currentTimeMillis();
		bwt.forward(new IndexedByteArray(data.array(), 0), new IndexedByteArray(temp, 0));
		outData = hc.compress(temp);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms with LZ4-HC-BWT and achieved ratio of " + (128.0 * 3 * 1024 / outData.length));
		outData = fast.compress(data.array());
		final LZ4FastDecompressor decomp = factory.fastDecompressor();
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4");
		outData = fast.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4");
		outData = fast.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4");
		outData = fast.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4");
		outData = hc.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4-HC");
		outData = hc.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4-HC");
		outData = hc.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4-HC");
		outData = hc.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4-HC");
		outData = fast.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		bwt.inverse(new IndexedByteArray(outData, 0), new IndexedByteArray(temp, 0));
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4-BWT");
		outData = fast.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		bwt.inverse(new IndexedByteArray(outData, 0), new IndexedByteArray(temp, 0));
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4-BWT");
		outData = fast.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		bwt.inverse(new IndexedByteArray(outData, 0), new IndexedByteArray(temp, 0));
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4-BWT");
		outData = fast.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		bwt.inverse(new IndexedByteArray(outData, 0), new IndexedByteArray(temp, 0));
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4-BWT");
		outData = hc.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		bwt.inverse(new IndexedByteArray(outData, 0), new IndexedByteArray(temp, 0));
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4-HC-BWT");
		outData = hc.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		bwt.inverse(new IndexedByteArray(outData, 0), new IndexedByteArray(temp, 0));
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4-HC-BWT");
		outData = hc.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		bwt.inverse(new IndexedByteArray(outData, 0), new IndexedByteArray(temp, 0));
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4-HC-BWT");
		outData = hc.compress(data.array());
		start = System.currentTimeMillis();
		outData = decomp.decompress(outData, 128 * 3 * 1024);
		bwt.inverse(new IndexedByteArray(outData, 0), new IndexedByteArray(temp, 0));
		end = System.currentTimeMillis();
		System.out.println("Took " + (end - start) + "ms to decompress LZ4-HC-BWT");
	}
}
