package com.exascale.optimizer.testing;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.ArrayList;

import javax.swing.tree.DefaultMutableTreeNode;

public class Driver 
{
	protected static Operator temp;
	protected static Operator temp2;
	protected static Operator temp3;
	protected static Operator temp4;
	protected static RootOperator parseOutput;
	protected static ArrayList<String> vStr = new ArrayList<String>();
	protected static ArrayList<String> vStr2 = new ArrayList<String>();
	protected static ArrayList<Boolean> vBool = new ArrayList<Boolean>();
	protected static ArrayList<AggregateOperator> vOp = new ArrayList<AggregateOperator>();
	protected static MetaData meta = null;
	protected static final int QUEUE_SIZE = 2500000;
	
	private static class ConnectionManagerThread extends ThreadPoolThread
	{
		public void run()
		{
			ConnectionManager.main(new String[1]);
		}
	}
	
	public static void main(String[] args)
	{	
		new ResourceManager().start();
		//new ConnectionManagerThread().start();
		try
		{
			long start, end;
			Phase4 phase4 = null;
			Phase5 phase5 = null;
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(1);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #1 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #1 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(2);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #2 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #2 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(3);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #3 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #3 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(4);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #4 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #4 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(5);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #5 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #5 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(6);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #6 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #6 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(7);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #7 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #7 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(8);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #8 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #8 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(9);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5 = phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #9 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #9 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(10);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #10 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #10 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(11);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #11 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #11 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(12);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #12 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #12 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(14);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #14 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #14 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(15);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #15 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #15 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(16);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #16 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #16 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(17);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5 = phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #17 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #17 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(18);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #18 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #18 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(19);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #19 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #19 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(20);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #20 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #20 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(21);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #21 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #21 took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			meta = new MetaData();
			parseOutput = getTree(22);
			phase1(parseOutput);
			phase2(parseOutput);
			phase3(parseOutput);
			phase4 = phase4(parseOutput);
			phase5(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #22 optimization took " + ((end - start) / 1000) + " seconds");
			start = System.currentTimeMillis();
			//runQuery(parseOutput);
			end = System.currentTimeMillis();
			System.out.println("Query #22 took " + ((end - start) / 1000) + " seconds");
			System.out.println("Execution is complete.");
			Thread.sleep(90000);
			ResourceManager.printOpenStructures();
			System.exit(0);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.exit(1);
		}
	}
	
	public static void printTree( int indent, Operator op ) 
	{
		  for( int i = 0; i < indent; ++i) 
		  {
		    System.out.print(" ");
		  }

		  ArrayList<Operator> children = op.children();
		  if(children.size() != 0) 
		  {
		    System.out.println("(" + op);     
		    for (Operator child : children)
		    {
		    	printTree(indent + 4, child); 
		    }

		    //we have a new line so print the indent again
		    for( int i = 0; i < indent; ++i) 
		    {
		      System.out.print(" ");
		    }
		    System.out.println(")"); 
		  } 
		  else 
		  {
		    System.out.println(op);
		  } 
		}
	
	public static void printTreeWithCard( int indent, Operator op, Phase5 phase5 ) 
	{
		  for( int i = 0; i < indent; ++i) 
		  {
		    System.out.print(" ");
		  }

		  ArrayList<Operator> children = op.children();
		  if(children.size() != 0) 
		  {
		    System.out.println("(" + op + " #" + phase5.card(op));     
		    for (Operator child : children)
		    {
		    	printTreeWithCard(indent + 4, child, phase5); 
		    }

		    //we have a new line so print the indent again
		    for( int i = 0; i < indent; ++i) 
		    {
		      System.out.print(" ");
		    }
		    System.out.println(")"); 
		  } 
		  else 
		  {
		    System.out.println(op + " #" + phase5.card(op));
		  } 
		}
	
	public static void phase1(RootOperator root) throws Exception
	{
		new Phase1(root).optimize();
	}
	
	public static void phase2(RootOperator root) throws Exception
	{
		new Phase2(root).optimize();
	}
	
	public static void phase3(RootOperator root) throws Exception
	{
		new Phase3(root).optimize();
	}
	
	public static Phase4 phase4(RootOperator root) throws Exception
	{
		Phase4 retval = new Phase4(root);
		retval.optimize();
		return retval;
	}
	
	public static Phase5 phase5(RootOperator root) throws Exception
	{
		Phase5 retval = new Phase5(root);
		retval.optimize();
		return retval;
	}
	
	protected static void runQuery(RootOperator parseOutput)
	{
		try
		{
			parseOutput.start();
			printHeaders(parseOutput);
			Object o = parseOutput.next();
			long i = 0;
			while (! (o instanceof DataEndMarker))
			{
				ArrayList<Object> row = (ArrayList<Object>)o;
				for (Object obj : row)
				{
					System.out.print(obj +"\t");
				}
			
				System.out.println("");
				o = parseOutput.next();
				i++;
			}
		
			System.out.println(i + " rows returned");
			parseOutput.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.exit(1);
		}
	}
		
	protected static void printHeaders(RootOperator op)
	{
		String line = "";
		for (Map.Entry entry : op.getPos2Col().entrySet())
		{
			line += (entry.getValue() + "\t");
		}
		
		System.out.println(line);
	}
	
	protected static RootOperator getTree(int i) throws Exception
	{
		vStr.clear();
		vStr2.clear();
		vBool.clear();
		vOp.clear();
		
		if (i == 0)
		{
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp2 = new SelectOperator(new Filter("L_RETURNFLAG", "E", "'N'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_LINESTATUS", "E", "'O'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_SHIPDATE", "LE", "DATE('1998-09-02')"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_ORDERKEY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vOp.add(new CountOperator("_E1", meta));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 1)
		{
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			Filter hold = new Filter("L_SHIPDATE", "LE", "DATE('1998-09-02')");
			temp2 = new SelectOperator(hold, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,-,1,L_DISCOUNT,L_EXTENDEDPRICE", "_E1", meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,*,-,1,L_DISCOUNT,+,1,L_TAX,L_EXTENDEDPRICE", "_E2", meta);
			temp2.add(temp);
			temp = temp2;
			vStr.add("L_RETURNFLAG");
			vStr.add("L_LINESTATUS");
			vStr.add("L_QUANTITY");
			vStr.add("L_EXTENDEDPRICE");
			vStr.add("_E1");
			vStr.add("_E2");
			vStr.add("L_DISCOUNT");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_RETURNFLAG");
			vStr.add("L_LINESTATUS");
			vBool.add(true);
			vBool.add(true);
			vOp.add(new SumOperator("L_QUANTITY", "_E3", meta, false));
			vOp.add(new SumOperator("L_EXTENDEDPRICE", "_E4", meta, false));
			vOp.add(new SumOperator("_E1", "_E5", meta, false));
			vOp.add(new SumOperator("_E2", "_E6", meta, false));
			vOp.add(new AvgOperator("L_QUANTITY", "_E7", meta));
			vOp.add(new AvgOperator("L_EXTENDEDPRICE", "_E8", meta));
			vOp.add(new AvgOperator("L_DISCOUNT", "_E9", meta));
			vOp.add(new CountOperator("_E10", meta));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("_E3");
			vStr2.add("SUM_QTY");
			vStr.add("_E4");
			vStr2.add("SUM_BASE_PRICE");
			vStr.add("_E5");
			vStr2.add("SUM_DISC_PRICE");
			vStr.add("_E6");
			vStr2.add("SUM_CHARGE");
			vStr.add("_E7");
			vStr2.add("AVG_QTY");
			vStr.add("_E8");
			vStr2.add("AVG_PRICE");
			vStr.add("_E9");
			vStr2.add("AVG_DISC");
			vStr.add("_E10");
			vStr2.add("COUNT_ORDER");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2; 
			vStr = new ArrayList<String>();
			vStr.add("L_RETURNFLAG");
			vStr.add("L_LINESTATUS");
			vStr.add("SUM_QTY");
			vStr.add("SUM_BASE_PRICE");
			vStr.add("SUM_DISC_PRICE");
			vStr.add("SUM_CHARGE");
			vStr.add("AVG_QTY");
			vStr.add("AVG_PRICE");
			vStr.add("AVG_DISC");
			vStr.add("COUNT_ORDER");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
		//	*/
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 2)
		{
			temp = new TableScanOperator("TPCH", "REGION", meta);
			temp2 = new TableScanOperator("TPCH", "NATION", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "SUPPLIER", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "PARTSUPP", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			temp2 = new SelectOperator(new Filter("S_SUPPKEY", "E", "PS_SUPPKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("S_NATIONKEY", "E", "N_NATIONKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("N_REGIONKEY", "E", "R_REGIONKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("R_NAME", "E", "'EUROPE'"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("PS_PARTKEY");
			vOp.add(new MinOperator("PS_SUPPLYCOST", "_E1", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr2 = new ArrayList<String>();
			vStr.add("PS_PARTKEY");
			vStr2.add("PS_PARTKEY2");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("PS_PARTKEY2");
			vStr.add("_E1");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			Operator subquery = temp2;
			temp = new TableScanOperator("TPCH", "REGION", meta);
			temp2 = new TableScanOperator("TPCH", "NATION", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "SUPPLIER", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "PART", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "PARTSUPP", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			temp2 = new SelectOperator(new Filter("P_PARTKEY", "E", "PS_PARTKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("S_SUPPKEY", "E", "PS_SUPPKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("P_SIZE", "E", "15"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("P_TYPE", "LI", "'%BRASS'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("S_NATIONKEY", "E", "N_NATIONKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("N_REGIONKEY", "E", "R_REGIONKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("R_NAME", "E", "'EUROPE'"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("S_ACCTBAL");
			vStr.add("S_NAME");
			vStr.add("N_NAME");
			vStr.add("P_PARTKEY");
			vStr.add("P_MFGR");
			vStr.add("S_ADDRESS");
			vStr.add("S_PHONE");
			vStr.add("S_COMMENT");
			vStr.add("PS_SUPPLYCOST");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ProductOperator(meta);
			temp2.add(subquery);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("P_PARTKEY", "E", "PS_PARTKEY2"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("PS_SUPPLYCOST", "E", "_E1"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("S_ACCTBAL");
			vStr.add("N_NAME");
			vStr.add("S_NAME");
			vStr.add("P_PARTKEY");
			vBool = new ArrayList<Boolean>();
			vBool.add(false);
			vBool.add(true);
			vBool.add(true);
			vBool.add(true);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new TopOperator(100, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("S_ACCTBAL");
			vStr.add("S_NAME");
			vStr.add("N_NAME");
			vStr.add("P_PARTKEY");
			vStr.add("P_MFGR");
			vStr.add("S_ADDRESS");
			vStr.add("S_PHONE");
			vStr.add("S_COMMENT");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i ==3)
		{
			temp = new TableScanOperator("TPCH", "ORDERS", meta);
			temp2 = new TableScanOperator("TPCH", "CUSTOMER", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(temp3);
			temp = temp2;
			Filter hold1 = new Filter("C_MKTSEGMENT", "E", "'BUILDING'");
			temp2 = new SelectOperator(hold1, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold2 = new Filter("C_CUSTKEY", "E", "O_CUSTKEY");
			temp2 = new SelectOperator(hold2, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold3 = new Filter("L_ORDERKEY", "E", "O_ORDERKEY");
			temp2 = new SelectOperator(hold3, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold4 = new Filter("O_ORDERDATE", "L", "DATE('1995-03-15')");
			temp2 = new SelectOperator(hold4, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold5 = new Filter("L_SHIPDATE", "G", "DATE('1995-03-15')");
			temp2 = new SelectOperator(hold5, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,-,1,L_DISCOUNT,L_EXTENDEDPRICE", "_E1", meta);
			temp2.add(temp);
			temp = temp2;
			vStr.add("L_ORDERKEY");
			vStr.add("_E1");
			vStr.add("O_ORDERDATE");
			vStr.add("O_SHIPPRIORITY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_ORDERKEY");
			vStr.add("O_ORDERDATE");
			vStr.add("O_SHIPPRIORITY");
			//	temp2 = new SortOperator(vStr, vBool, meta);
			//	temp2.add(temp);
			//	temp = temp2;
			//for all aggregate operators - if no input rows, generate no output rows
			vOp.add(new SumOperator("_E1", "_E2", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("_E2");
			vStr.add("O_ORDERDATE");
			vBool.add(false);
			vBool.add(true);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new TopOperator(10, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("_E2");
			vStr2.add("REVENUE");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2; 
			vStr = new ArrayList<String>();
			vStr.add("L_ORDERKEY");
			vStr.add("REVENUE");
			vStr.add("O_ORDERDATE");
			vStr.add("O_SHIPPRIORITY");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			//	*/
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 4)
		{
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp2 = new SelectOperator(new Filter("L_COMMITDATE", "L", "L_RECEIPTDATE"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_ORDERKEY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new TableScanOperator("TPCH", "ORDERS", meta);
			temp3 = new SelectOperator(new Filter("O_ORDERDATE", "GE", "DATE('1993-07-01')"), meta);
			temp3.add(temp2);
			temp2 = temp3;
			temp3 = new SelectOperator(new Filter("O_ORDERDATE", "L", "DATE('1993-10-01')"), meta);
			temp3.add(temp2);
			temp2 = temp3;
			vStr = new ArrayList<String>();
			vStr.add("O_ORDERPRIORITY");
			vStr.add("O_ORDERKEY");
			temp3 = new ProjectOperator(vStr, meta);
			temp3.add(temp2);
			temp2 = temp3;
			temp3 = new SemiJoinOperator("O_ORDERKEY", meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			vStr = new ArrayList<String>();
			vStr.add("O_ORDERPRIORITY");
			vOp.add(new CountOperator("ORDER_COUNT", meta));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("O_ORDERPRIORITY");
			vBool.add(true);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("O_ORDERPRIORITY");
			vStr.add("ORDER_COUNT");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 5)
		{
			temp = new TableScanOperator("TPCH", "REGION", meta);
			temp2 = new TableScanOperator("TPCH", "NATION", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = new TableScanOperator("TPCH", "SUPPLIER", meta); 
			temp2 = new ProductOperator(meta);
			temp2.add(temp3);
			temp2.add(temp);
			temp3 = temp2;
			temp = new TableScanOperator("TPCH", "CUSTOMER", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(temp3);
			temp3 = temp2;
			temp = new TableScanOperator("TPCH", "ORDERS", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp3);
			temp2.add(temp);
			temp3 = temp2;
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(temp3);
			temp = temp2;
			Filter hold1 = new Filter("C_CUSTKEY", "E", "O_CUSTKEY");
			temp2 = new SelectOperator(hold1, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold2 = new Filter("L_ORDERKEY", "E", "O_ORDERKEY");
			temp2 = new SelectOperator(hold2, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold3 = new Filter("L_SUPPKEY", "E", "S_SUPPKEY");
			temp2 = new SelectOperator(hold3, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold4 = new Filter("C_NATIONKEY", "E", "S_NATIONKEY");
			temp2 = new SelectOperator(hold4, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold5 = new Filter("S_NATIONKEY", "E", "N_NATIONKEY");
			temp2 = new SelectOperator(hold5, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold6 = new Filter("N_REGIONKEY", "E", "R_REGIONKEY");
			temp2 = new SelectOperator(hold6, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold7 = new Filter("R_NAME", "E", "'ASIA'");
			temp2 = new SelectOperator(hold7, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold8 = new Filter("O_ORDERDATE", "GE", "DATE('1994-01-01')");
			temp2 = new SelectOperator(hold8, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold9 = new Filter("O_ORDERDATE", "L", "DATE('1995-01-01')");
			temp2 = new SelectOperator(hold9, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,-,1,L_DISCOUNT,L_EXTENDEDPRICE", "_E1", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("N_NAME");
			vStr.add("_E1");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("N_NAME");
			vOp.add(new SumOperator("_E1", "_E2", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("_E2");
			vBool.add(false);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("_E2");
			vStr2.add("REVENUE");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2; 
			vStr = new ArrayList<String>();
			vStr.add("N_NAME");
			vStr.add("REVENUE");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 6)
		{
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			Filter hold1 = new Filter("L_SHIPDATE", "GE", "DATE('1994-01-01')");
			temp2 = new SelectOperator(hold1, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold2 = new Filter("L_SHIPDATE", "L", "DATE('1995-01-01')");
			temp2 = new SelectOperator(hold2, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold3 = new Filter("L_DISCOUNT", "GE", "0.05");
			temp2 = new SelectOperator(hold3, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold4 = new Filter("L_DISCOUNT", "LE", "0.07");
			temp2 = new SelectOperator(hold4, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold5 = new Filter("L_QUANTITY", "L", "24");
			temp2 = new SelectOperator(hold5, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,L_DISCOUNT,L_EXTENDEDPRICE", "_E1", meta);
			temp2.add(temp);
			temp = temp2;
			vStr.add("_E1");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vOp.add(new SumOperator("_E1", "_E2", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("_E2");
			vStr2.add("REVENUE");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2; 
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 7)
		{
			temp = new TableScanOperator("TPCH", "NATION", meta);
			temp2 = new ProductOperator(meta);
			vStr = new ArrayList<String>();
			vStr2 = new ArrayList<String>();
			vStr.add("N_NATIONKEY");
			vStr2.add("N_NATIONKEY2");
			vStr.add("N_NAME");
			vStr2.add("N_NAME2");
			vStr.add("N_REGIONKEY");
			vStr2.add("N_REGIONKEY2");
			vStr.add("N_COMMENT");
			vStr2.add("N_COMMENT2");
			temp3 = new RenameOperator(vStr, vStr2, meta);
			temp3.add(temp);
			temp2.add(temp);
			temp2.add(temp3);
			temp3 = temp2;
			temp = new TableScanOperator("TPCH", "SUPPLIER", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp3);
			temp2.add(temp);
			temp3 = temp2;
			temp = new TableScanOperator("TPCH", "CUSTOMER", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(temp3);
			temp3 = temp2;
			temp = new TableScanOperator("TPCH", "ORDERS", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(temp3);
			temp3 = temp2;
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(temp3);
			temp = temp2;
			Filter hold1 = new Filter("S_SUPPKEY", "E", "L_SUPPKEY");
			temp2 = new SelectOperator(hold1, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold2 = new Filter("O_ORDERKEY", "E", "L_ORDERKEY");
			temp2 = new SelectOperator(hold2, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold3 = new Filter("C_CUSTKEY", "E", "O_CUSTKEY");
			temp2 = new SelectOperator(hold3, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold4 = new Filter("S_NATIONKEY", "E", "N_NATIONKEY");
			temp2 = new SelectOperator(hold4, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold5 = new Filter("C_NATIONKEY", "E", "N_NATIONKEY2");
			temp2 = new SelectOperator(hold5, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold6 = new Filter("L_SHIPDATE", "GE", "DATE('1995-01-01')");
			temp2 = new SelectOperator(hold6, meta);
			temp2.add(temp);
			temp = temp2;
			Filter hold7 = new Filter("L_SHIPDATE", "LE", "DATE('1996-12-31')");
			temp2 = new SelectOperator(hold7, meta);
			temp2.add(temp);
			temp = temp2;
			ArrayList<Filter> hold8 = new ArrayList<Filter>();
			hold8.add(new Filter("N_NAME", "E", "'FRANCE'"));
			hold8.add(new Filter("N_NAME", "E", "'GERMANY'"));
			temp2 = new SelectOperator(hold8, meta);
			temp2.add(temp);
			temp = temp2;
			ArrayList<Filter> hold9 = new ArrayList<Filter>();
			hold9.add(new Filter("N_NAME", "E", "'FRANCE'"));
			hold9.add(new Filter("N_NAME2", "E", "'FRANCE'"));
			temp2 = new SelectOperator(hold9, meta);
			temp2.add(temp);
			temp = temp2;
			ArrayList<Filter> hold10 = new ArrayList<Filter>();
			hold10.add(new Filter("N_NAME2", "E", "'GERMANY'"));
			hold10.add(new Filter("N_NAME", "E", "'GERMANY'"));
			temp2 = new SelectOperator(hold10, meta);
			temp2.add(temp);
			temp = temp2;
			ArrayList<Filter> hold11 = new ArrayList<Filter>();
			hold11.add(new Filter("N_NAME2", "E", "'GERMANY'"));
			hold11.add(new Filter("N_NAME2", "E", "'FRANCE'"));
			temp2 = new SelectOperator(hold11, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new YearOperator("L_SHIPDATE", "_E1", meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,-,1,L_DISCOUNT,L_EXTENDEDPRICE", "_E2", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("N_NAME");
			vStr.add("N_NAME2");
			vStr.add("_E1");
			vStr.add("_E2");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr2 = new ArrayList<String>();
			vStr.add("N_NAME");
			vStr2.add("SUPP_NATION");
			vStr.add("N_NAME2");
			vStr2.add("CUST_NATION");
			vStr.add("_E1");
			vStr2.add("L_YEAR");
			vStr.add("_E2");
			vStr2.add("VOLUME");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("SUPP_NATION");
			vStr.add("CUST_NATION");
			vStr.add("L_YEAR");
			vStr.add("VOLUME");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("SUPP_NATION");
			vStr.add("CUST_NATION");
			vStr.add("L_YEAR");
			vOp.add(new SumOperator("VOLUME", "_E3", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("SUPP_NATION");
			vStr.add("CUST_NATION");
			vStr.add("L_YEAR");
			vBool.add(true);
			vBool.add(true);
			vBool.add(true);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr2 = new ArrayList<String>();
			vStr.add("_E3");
			vStr2.add("REVENUE");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("SUPP_NATION");
			vStr.add("CUST_NATION");
			vStr.add("L_YEAR");
			vStr.add("REVENUE");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 8)
		{
			temp = new TableScanOperator("TPCH", "NATION", meta);
			temp2 = new TableScanOperator("TPCH", "NATION", meta);
			vStr = new ArrayList<String>();
			vStr2 = new ArrayList<String>();
			vStr.add("N_NATIONKEY");
			vStr2.add("N_NATIONKEY2");
			vStr.add("N_NAME");
			vStr2.add("N_NAME2");
			vStr.add("N_REGIONKEY");
			vStr2.add("N_REGIONKEY2");
			vStr.add("N_COMMENT");
			vStr2.add("N_COMMENT2");
			temp3 = new RenameOperator(vStr, vStr2, meta);
			temp3.add(temp2);
			temp4 = new ProductOperator(meta);
			temp4.add(temp3);
			temp4.add(temp);
			temp = temp4;
			temp2 = new TableScanOperator("TPCH", "REGION", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "SUPPLIER", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "PART", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "CUSTOMER", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "ORDERS", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			temp2 = new SelectOperator(new Filter("P_PARTKEY", "E", "L_PARTKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("S_SUPPKEY", "E", "L_SUPPKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_ORDERKEY", "E", "O_ORDERKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("O_CUSTKEY", "E", "C_CUSTKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("C_NATIONKEY", "E", "N_NATIONKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("N_REGIONKEY", "E", "R_REGIONKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("R_NAME", "E", "'AMERICA'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("S_NATIONKEY", "E", "N_NATIONKEY2"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("O_ORDERDATE", "GE", "DATE('1995-01-01')"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("O_ORDERDATE", "LE", "DATE('1996-12-31')"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("P_TYPE", "E", "'ECONOMY ANODIZED STEEL'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,-,1,L_DISCOUNT,L_EXTENDEDPRICE", "VOLUME", meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new YearOperator("O_ORDERDATE", "O_YEAR", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("O_YEAR");
			vStr.add("VOLUME");
			vStr.add("N_NAME2");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr2 = new ArrayList<String>();
			vStr.add("N_NAME2");
			vStr2.add("NATION");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2; 
			HashMap<Filter, Filter> vFilter = new HashMap<Filter, Filter>();
			Filter filter = new Filter("NATION", "E", "'BRAZIL'");
			vFilter.put(filter, filter);
			HashSet<HashMap<Filter, Filter>> set = new HashSet<HashMap<Filter, Filter>>();
			set.add(vFilter);
			ArrayList<HashSet<HashMap<Filter, Filter>>> filters = new ArrayList<HashSet<HashMap<Filter, Filter>>>();
			filters.add(set);
			ArrayList<String> vObj = new ArrayList<String>();
			vObj.add("VOLUME");
			vObj.add("0");
			temp2 = new CaseOperator(filters, vObj, "_E1", "FLOAT", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("O_YEAR");
			vStr.add("VOLUME");
			vStr.add("_E1");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("O_YEAR");
			vOp.add(new SumOperator("_E1", "_E2", meta, false));
			vOp.add(new SumOperator("VOLUME", "_E3", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("/,_E2,_E3", "MKT_SHARE", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("O_YEAR");
			vBool = new ArrayList<Boolean>();
			vBool.add(true);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("O_YEAR");
			vStr.add("MKT_SHARE");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 9)
		{
			temp = new TableScanOperator("TPCH", "NATION", meta);
			temp2 = new TableScanOperator("TPCH", "SUPPLIER", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = new TableScanOperator("TPCH", "PART", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(temp3);
			temp3 = temp2;
			temp = new TableScanOperator("TPCH", "PARTSUPP", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(temp3);
			temp3 = temp2;
			temp = new TableScanOperator("TPCH", "ORDERS", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(temp3);
			temp3 = temp2;
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(temp3);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("S_SUPPKEY", "E", "L_SUPPKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("PS_SUPPKEY", "E", "L_SUPPKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("PS_PARTKEY", "E", "L_PARTKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("P_PARTKEY", "E", "L_PARTKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("O_ORDERKEY", "E", "L_ORDERKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("S_NATIONKEY", "E", "N_NATIONKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("P_NAME", "LI", "'%green%'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new YearOperator("O_ORDERDATE", "O_YEAR", meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("-,*,-,1,L_DISCOUNT,L_EXTENDEDPRICE,*,PS_SUPPLYCOST,L_QUANTITY", "AMOUNT", meta);
			temp2.add(temp);
			temp = temp2;
			vStr.add("N_NAME");
			vStr.add("O_YEAR");
			vStr.add("AMOUNT");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr2 = new ArrayList<String>();
			vStr.add("N_NAME");
			vStr2.add("NATION");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("NATION");
			vStr.add("O_YEAR");
			vStr.add("AMOUNT");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("NATION");
			vStr.add("O_YEAR");
			vOp.add(new SumOperator("AMOUNT", "SUM_PROFIT", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("NATION");
			vStr.add("O_YEAR");
			vBool.add(true);
			vBool.add(false);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("NATION");
			vStr.add("O_YEAR");
			vStr.add("SUM_PROFIT");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 10)
		{
			temp = new TableScanOperator("TPCH", "NATION", meta);
			temp2 = new TableScanOperator("TPCH", "CUSTOMER", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = new TableScanOperator("TPCH", "ORDERS", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(temp3);
			temp3 = temp2;
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(temp3);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("C_CUSTKEY", "E", "O_CUSTKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_ORDERKEY", "E", "O_ORDERKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("O_ORDERDATE", "GE", "DATE('1993-10-01')"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("O_ORDERDATE", "L", "DATE('1994-01-01')"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_RETURNFLAG", "E", "'R'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("C_NATIONKEY", "E", "N_NATIONKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,-,1,L_DISCOUNT,L_EXTENDEDPRICE", "_E1", meta);
			temp2.add(temp);
			temp = temp2;
			vStr.add("C_CUSTKEY");
			vStr.add("C_NAME");
			vStr.add("_E1");
			vStr.add("C_ACCTBAL");
			vStr.add("N_NAME");
			vStr.add("C_ADDRESS");
			vStr.add("C_PHONE");
			vStr.add("C_COMMENT");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("C_CUSTKEY");
			vStr.add("C_NAME");
			vStr.add("C_ACCTBAL");
			vStr.add("C_PHONE");
			vStr.add("N_NAME");
			vStr.add("C_ADDRESS");
			vStr.add("C_COMMENT");
			vOp.add(new SumOperator("_E1", "REVENUE", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("REVENUE");
			vBool.add(false);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new TopOperator(20, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("C_CUSTKEY");
			vStr.add("C_NAME");
			vStr.add("REVENUE");
			vStr.add("C_ACCTBAL");
			vStr.add("N_NAME");
			vStr.add("C_ADDRESS");
			vStr.add("C_PHONE");
			vStr.add("C_COMMENT");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 11)
		{
			temp = new TableScanOperator("TPCH", "NATION", meta);
			temp2 = new TableScanOperator("TPCH", "SUPPLIER", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = new TableScanOperator("TPCH", "PARTSUPP", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(temp3);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("PS_SUPPKEY", "E", "S_SUPPKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("S_NATIONKEY", "E", "N_NATIONKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("N_NAME", "E", "'GERMANY'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,PS_SUPPLYCOST,PS_AVAILQTY", "_E1", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("_E1");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new SumOperator("_E1", "_E2", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,_E2,0.0001", "_E3", meta);
			temp2.add(temp);
			Operator subselect = temp2;
			temp = new TableScanOperator("TPCH", "NATION", meta);
			temp2 = new TableScanOperator("TPCH", "SUPPLIER", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "PARTSUPP", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			temp2 = new SelectOperator(new Filter("PS_SUPPKEY", "E", "S_SUPPKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("S_NATIONKEY", "E", "N_NATIONKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("N_NAME", "E", "'GERMANY'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,PS_SUPPLYCOST,PS_AVAILQTY", "_E4", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("PS_PARTKEY");
			vStr.add("_E4");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("PS_PARTKEY");
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new SumOperator("_E4", "VALUE", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(subselect);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("VALUE", "G", "_E3"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("VALUE");
			vBool = new ArrayList<Boolean>();
			vBool.add(false);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("PS_PARTKEY");
			vStr.add("VALUE");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 12)
		{
			temp = new TableScanOperator("TPCH", "ORDERS", meta);
			temp2 = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new SelectOperator(new Filter("O_ORDERKEY", "E", "L_ORDERKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			ArrayList<Filter> filters = new ArrayList<Filter>();
			filters.add(new Filter("L_SHIPMODE", "E", "'MAIL'"));
			filters.add(new Filter("L_SHIPMODE", "E", "'SHIP'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_COMMITDATE", "L", "L_RECEIPTDATE"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_SHIPDATE", "L", "L_COMMITDATE"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_RECEIPTDATE", "GE", "DATE('1994-01-01')"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_RECEIPTDATE", "L", "DATE('1995-01-01')"), meta);
			temp2.add(temp);
			temp = temp2;
			HashMap<Filter, Filter> vFilter = new HashMap<Filter, Filter>();
			Filter filter = new Filter("O_ORDERPRIORITY", "E", "'1-URGENT'");
			vFilter.put(filter, filter);
			filter = new Filter("O_ORDERPRIORITY", "E", "'2-HIGH'");
			vFilter.put(filter, filter);
			HashSet<HashMap<Filter, Filter>> set = new HashSet<HashMap<Filter, Filter>>();
			set.add(vFilter);
			ArrayList<HashSet<HashMap<Filter, Filter>>> filters2 = new ArrayList<HashSet<HashMap<Filter, Filter>>>();
			filters2.add(set);
			ArrayList<String> vObj = new ArrayList<String>();
			vObj.add("1");
			vObj.add("0");
			temp2 = new CaseOperator(filters2, vObj, "_E1", "LONG", meta);
			temp2.add(temp);
			temp = temp2;
			vFilter = new HashMap<Filter, Filter>();
			filter = new Filter("O_ORDERPRIORITY", "NE", "'1-URGENT'");
			vFilter.put(filter, filter);
			set = new HashSet<HashMap<Filter, Filter>>();
			set.add(vFilter);
			vFilter = new HashMap<Filter, Filter>();
			filter = new Filter("O_ORDERPRIORITY", "NE", "'2-HIGH'");
			vFilter.put(filter, filter);
			set.add(vFilter);
			filters2 = new ArrayList<HashSet<HashMap<Filter, Filter>>>();
			filters2.add(set);
			vObj = new ArrayList<String>();
			vObj.add("1");
			vObj.add("0");
			temp2 = new CaseOperator(filters2, vObj, "_E2", "LONG", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_SHIPMODE");
			vStr.add("_E1");
			vStr.add("_E2");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_SHIPMODE");
			vOp.add(new SumOperator("_E1", "HIGH_LINE_COUNT", meta, false));
			vOp.add(new SumOperator("_E2", "LOW_LINE_COUNT", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_SHIPMODE");
			vBool = new ArrayList<Boolean>();
			vBool.add(true);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_SHIPMODE");
			vStr.add("HIGH_LINE_COUNT");
			vStr.add("LOW_LINE_COUNT");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 14)
		{
			temp = new TableScanOperator("TPCH", "PART", meta);
			temp2 = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new SelectOperator(new Filter("L_PARTKEY", "E", "P_PARTKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_SHIPDATE", "GE", "DATE('1995-09-01')"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_SHIPDATE", "L", "DATE('1995-10-01')"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,-,1,L_DISCOUNT,L_EXTENDEDPRICE", "_E1", meta);
			temp2.add(temp);
			temp = temp2;
			HashMap<Filter, Filter> vFilter = new HashMap<Filter, Filter>();
			Filter filter = new Filter("P_TYPE", "LI", "'PROMO%'");
			vFilter.put(filter, filter);
			HashSet<HashMap<Filter, Filter>> set = new HashSet<HashMap<Filter, Filter>>();
			set.add(vFilter);
			ArrayList<HashSet<HashMap<Filter, Filter>>> filters2 = new ArrayList<HashSet<HashMap<Filter, Filter>>>();
			filters2.add(set);
			ArrayList<String> vObj = new ArrayList<String>();
			vObj.add("_E1");
			vObj.add("0.0");
			temp2 = new CaseOperator(filters2, vObj, "_E2", "FLOAT", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("_E1");
			vStr.add("_E2");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vOp.add(new SumOperator("_E1", "_E3", meta, false));
			vOp.add(new SumOperator("_E2", "_E4", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,/,_E4,_E3,100", "PROMO_REVENUE", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("PROMO_REVENUE");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		if (i == 15)
		{
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			Operator lineitem = temp;
			temp2 = new SelectOperator(new Filter("L_SHIPDATE", "GE", "DATE('1996-01-01')"), meta);
			temp2.add(lineitem);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_SHIPDATE", "L", "DATE('1996-04-01')"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,-,1,L_DISCOUNT,L_EXTENDEDPRICE", "_E1", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_SUPPKEY");
			vStr.add("_E1");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_SUPPKEY");
			//for all aggregate operators - if no input rows, generate no output rows
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new SumOperator("_E1", "_E2", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr2 = new ArrayList<String>();
			vStr.add("L_SUPPKEY");
			vStr2.add("SUPPLIER_NO");
			vStr.add("_E2");
			vStr2.add("TOTAL_REVENUE");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2; 
			vStr = new ArrayList<String>();
			vStr.add("SUPPLIER_NO");
			vStr.add("TOTAL_REVENUE");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			//for all aggregate operators - if no input rows, generate no output rows
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new MaxOperator("TOTAL_REVENUE", "_E3", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			Operator prodOp = temp2;
			temp2 = new SelectOperator(new Filter("L_SHIPDATE", "GE", "DATE('1996-01-01')"), meta);
			temp2.add(lineitem);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_SHIPDATE", "L", "DATE('1996-04-01')"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,-,1,L_DISCOUNT,L_EXTENDEDPRICE", "_E1", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_SUPPKEY");
			vStr.add("_E1");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_SUPPKEY");
			//for all aggregate operators - if no input rows, generate no output rows
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new SumOperator("_E1", "_E2", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr2 = new ArrayList<String>();
			vStr.add("L_SUPPKEY");
			vStr2.add("SUPPLIER_NO");
			vStr.add("_E2");
			vStr2.add("TOTAL_REVENUE");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2; 
			vStr = new ArrayList<String>();
			vStr.add("SUPPLIER_NO");
			vStr.add("TOTAL_REVENUE");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			prodOp.add(temp);
			temp = prodOp;
			temp2 = new TableScanOperator("TPCH", "SUPPLIER", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new SelectOperator(new Filter("TOTAL_REVENUE", "E", "_E3"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("S_SUPPKEY", "E", "SUPPLIER_NO"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("S_SUPPKEY");
			vStr.add("S_NAME");
			vStr.add("S_ADDRESS");
			vStr.add("S_PHONE");
			vStr.add("TOTAL_REVENUE");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("S_SUPPKEY");
			vBool.add(true);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("S_SUPPKEY");
			vStr.add("S_NAME");
			vStr.add("S_ADDRESS");
			vStr.add("S_PHONE");
			vStr.add("TOTAL_REVENUE");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		if (i == 16)
		{
			temp = new TableScanOperator("TPCH", "SUPPLIER", meta);
			temp2 = new SelectOperator(new Filter("S_COMMENT", "LI", "'%Customer%Complaints%'"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("S_SUPPKEY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			Operator subquery = temp2;
			temp = new TableScanOperator("TPCH", "PART", meta);
			temp2 = new TableScanOperator("TPCH", "PARTSUPP", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new SelectOperator(new Filter("P_PARTKEY", "E", "PS_PARTKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("P_BRAND", "NE", "'Brand#45'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("P_TYPE", "NL", "'MEDIUM POLISHED%'"), meta);
			temp2.add(temp);
			temp = temp2;
			ArrayList<Filter> vFilter = new ArrayList<Filter>();
			vFilter.add(new Filter("P_SIZE", "E", "49"));
			vFilter.add(new Filter("P_SIZE", "E", "14"));
			vFilter.add(new Filter("P_SIZE", "E", "23"));
			vFilter.add(new Filter("P_SIZE", "E", "45"));
			vFilter.add(new Filter("P_SIZE", "E", "19"));
			vFilter.add(new Filter("P_SIZE", "E", "3"));
			vFilter.add(new Filter("P_SIZE", "E", "36"));
			vFilter.add(new Filter("P_SIZE", "E", "9"));
			temp2 = new SelectOperator(vFilter, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new AntiJoinOperator("PS_SUPPKEY", meta);
			temp2.add(temp);
			temp2.add(subquery);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("P_BRAND");
			vStr.add("P_TYPE");
			vStr.add("P_SIZE");
			vStr.add("PS_SUPPKEY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("P_BRAND");
			vStr.add("P_TYPE");
			vStr.add("P_SIZE");
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new CountDistinctOperator("PS_SUPPKEY", "SUPPLIER_CNT", meta));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("SUPPLIER_CNT");
			vStr.add("P_BRAND");
			vStr.add("P_TYPE");
			vStr.add("P_SIZE");
			vBool = new ArrayList<Boolean>();
			vBool.add(false);
			vBool.add(true);
			vBool.add(true);
			vBool.add(true);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("P_BRAND");
			vStr.add("P_TYPE");
			vStr.add("P_SIZE");
			vStr.add("SUPPLIER_CNT");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		if (i == 17)
		{
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			vStr = new ArrayList<String>();
			vStr.add("L_PARTKEY");
			vStr.add("L_QUANTITY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_PARTKEY");
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new AvgOperator("L_QUANTITY", "_E1", meta));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,_E1,0.2", "_E2", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr2 = new ArrayList<String>();
			vStr.add("L_PARTKEY");
			vStr2.add("L_PARTKEY2");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_PARTKEY2");
			vStr.add("_E2");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			Operator subquery = temp2;
			temp = new TableScanOperator("TPCH", "PART", meta);
			temp2 = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new SelectOperator(new Filter("P_PARTKEY", "E", "L_PARTKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("P_BRAND", "E", "'Brand#23'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("P_CONTAINER", "E", "'MED BOX'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ProductOperator(meta);
			temp2.add(subquery);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_QUANTITY", "L", "_E2"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("P_PARTKEY", "E", "L_PARTKEY2"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_EXTENDEDPRICE");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new SumOperator("L_EXTENDEDPRICE", "_E3", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("/,_E3,7", "AVG_YEARLY", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("AVG_YEARLY");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		if (i == 18)
		{
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			vStr = new ArrayList<String>();
			vStr.add("L_ORDERKEY");
			vStr.add("L_QUANTITY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_ORDERKEY");
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new SumOperator("L_QUANTITY", "_E1", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("_E1", "G", "300"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_ORDERKEY");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			Operator subquery = temp2;
			temp = new TableScanOperator("TPCH", "CUSTOMER", meta);
			temp2 = new TableScanOperator("TPCH", "ORDERS", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			temp2 = new SelectOperator(new Filter("C_CUSTKEY", "E", "O_CUSTKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("O_ORDERKEY", "E", "L_ORDERKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SemiJoinOperator("O_ORDERKEY", meta);
			temp2.add(temp);
			temp2.add(subquery);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("C_NAME");
			vStr.add("C_CUSTKEY");
			vStr.add("O_ORDERKEY");
			vStr.add("O_ORDERDATE");
			vStr.add("O_TOTALPRICE");
			vStr.add("L_QUANTITY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("C_NAME");
			vStr.add("C_CUSTKEY");
			vStr.add("O_ORDERKEY");
			vStr.add("O_ORDERDATE");
			vStr.add("O_TOTALPRICE");
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new SumOperator("L_QUANTITY", "_E2", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("O_TOTALPRICE");
			vStr.add("O_ORDERDATE");
			vBool = new ArrayList<Boolean>();
			vBool.add(false);
			vBool.add(true);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new TopOperator(100, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("C_NAME");
			vStr.add("C_CUSTKEY");
			vStr.add("O_ORDERKEY");
			vStr.add("O_ORDERDATE");
			vStr.add("O_TOTALPRICE");
			vStr.add("_E2");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else if (i == 19)
		{
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp2 = new TableScanOperator("TPCH", "PART", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			temp2 = new SelectOperator(new Filter("P_PARTKEY", "E", "L_PARTKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			ArrayList<Filter> filters = new ArrayList<Filter>();
			filters.add(new Filter("L_SHIPMODE", "E", "'AIR'"));
			filters.add(new Filter("L_SHIPMODE", "E", "'AIR REG'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_SHIPINSTRUCT", "E", "'DELIVER IN PERSON'"), meta);
			temp2.add(temp);
			temp = temp2;
			
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE, "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//temp = temp2;filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "LE", "10"));
			//filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#34'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			temp = temp2;filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE, "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//temp = temp2;filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE, "LE", "10"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'LG PACK'"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"))
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE, "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE, "LE", "10"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "GE", "20"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("L_QUANTITY", "GE", "20"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("L_QUANTITY", "LE", "30"))
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("L_QUANTITY", "LE", "30"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			//filters.add(new Filter("L_QUANTITY", "LE", "30"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("L_QUANTITY", "LE", "30"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("L_QUANTITY", "LE", "30"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "LE", "30"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "LE", "10"));
			//filters.add(new Filter("L_QUANTITY", "LE", "30"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("L_QUANTITY", "LE", "30"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("L_QUANTITY", "LE", "30"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE, "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE, "LE", "10"));
			//filters.add(new Filter("L_QUANTITY", "LE", "30"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("L_QUANTITY", "LE", "30"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "LE", "30"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("L_QUANTITY", "LE", "30"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			//filters.add(new Filter("P_SIZE", "LE", "10"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			//filters.add(new Filter("P_SIZE", "LE", "10"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "LE", "10"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			//filters.add(new Filter("P_SIZE", "LE", "10"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE, "GE", "1"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE, "LE", "10"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			////filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("P_SIZE", "LE", "10"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_BRAND", "E", "'Brand#12'"));
			//filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("P_CONTAINER", "E", "'SM CASE'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PACK'"));
			filters.add(new Filter("P_CONTAINER", "E", "'SM PKG'"));
			//filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("L_QUANTITY", "LE", "11"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			filters.add(new Filter("L_QUANTITY", "LE", "11"));
			//filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_BRAND", "E", "'Brand#23"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			//filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "GE", "10"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("L_QUANTITY", "LE", "20"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE, "GE", "1"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE, "LE", "10"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_BRAND", "E", "'Brand#23'"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BAG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED BOX'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PKG'"));
			filters.add(new Filter("P_CONTAINER", "E", "'MED PACK'"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("L_QUANTITY", "GE", "10"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			filters.add(new Filter("L_QUANTITY", "LE", "20"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			//filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("P_SIZE", "GE", "1"));
			//filters.add(new Filter("P_SIZE", "LE", "15"));
			//temp2 = new SelectOperator(filters, meta);
			//temp2.add(temp);
			//temp = temp2;
			filters = new ArrayList<Filter>();
			//filters.add(new Filter("P_SIZE", "LE", "5"));
			//filters.add(new Filter("P_SIZE", "LE", "10"));
			filters.add(new Filter("P_SIZE", "LE", "15"));
			temp2 = new SelectOperator(filters, meta);
			temp2.add(temp);
			temp = temp2;
			
			temp2 = new ExtendOperator("*,-,1,L_DISCOUNT,L_EXTENDEDPRICE", "_E1", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("_E1");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vOp.add(new SumOperator("_E1", "_E2", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("_E2");
			vStr2.add("REVENUE");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2; 
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		if (i == 20)
		{
			temp = new TableScanOperator("TPCH", "PART", meta);
			temp2 = new SelectOperator(new Filter("P_NAME", "LI", "'forest%'"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("P_PARTKEY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			Operator subquery1 = temp2;
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp2 = new SelectOperator(new Filter("L_SHIPDATE", "GE", "DATE('1994-01-01')"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_SHIPDATE", "L", "DATE('1995-01-01')"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_QUANTITY");
			vStr.add("L_PARTKEY");
			vStr.add("L_SUPPKEY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_PARTKEY");
			vStr.add("L_SUPPKEY");
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new SumOperator("L_QUANTITY", "_E1", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			temp2 = new ExtendOperator("*,_E1,0.5", "_E2", meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_PARTKEY");
			vStr.add("L_SUPPKEY");
			vStr2 = new ArrayList<String>();
			vStr2.add("L_PARTKEY2");
			vStr2.add("L_SUPPKEY2");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("_E2");
			vStr.add("L_PARTKEY2");
			vStr.add("L_SUPPKEY2");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			Operator subquery2 = temp2;
			temp = new TableScanOperator("TPCH", "PARTSUPP", meta);
			temp2 = new SemiJoinOperator("PS_PARTKEY", meta);
			temp2.add(temp);
			temp2.add(subquery1);
			temp = temp2;
			temp2 = new ProductOperator(meta);
			temp2.add(temp);
			temp2.add(subquery2);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("PS_AVAILQTY", "G", "_E2"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("PS_PARTKEY", "E", "L_PARTKEY2"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("PS_SUPPKEY", "E", "L_SUPPKEY2"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("PS_SUPPKEY");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			Operator subquery = temp2;
			temp = new TableScanOperator("TPCH", "NATION", meta);
			temp2 = new TableScanOperator("TPC", "SUPPLIER", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new SemiJoinOperator("S_SUPPKEY", meta);
			temp2.add(temp);
			temp2.add(subquery);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("S_NATIONKEY", "E", "N_NATIONKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("N_NAME", "E", "'CANADA'"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("S_NAME");
			vBool = new ArrayList<Boolean>();
			vBool.add(true);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("S_NAME");
			vStr.add("S_ADDRESS");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		if (i == 21)
		{
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			vStr = new ArrayList<String>();
			vStr.add("L_ORDERKEY");
			vStr.add("L_SUPPKEY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr2 = new ArrayList<String>();
			vStr.add("L_ORDERKEY");
			vStr2.add("L_ORDERKEY2");
			vStr.add("L_SUPPKEY");
			vStr2.add("L_SUPPKEY2");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			Operator subquery1 = temp2;
			temp = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp2 = new SelectOperator(new Filter("L_RECEIPTDATE", "G", "L_COMMITDATE"), meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("L_ORDERKEY");
			vStr.add("L_SUPPKEY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr2 = new ArrayList<String>();
			vStr.add("L_ORDERKEY");
			vStr2.add("L_ORDERKEY3");
			vStr.add("L_SUPPKEY");
			vStr2.add("L_SUPPKEY3");
			temp2 = new RenameOperator(vStr, vStr2, meta);
			temp2.add(temp);
			Operator subquery2 = temp2;
			temp = new TableScanOperator("TPCH", "NATION", meta);
			temp2 = new TableScanOperator("TPCH", "SUPPLIER", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "ORDERS", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp);
			temp3.add(temp2);
			temp = temp3;
			temp2 = new TableScanOperator("TPCH", "LINEITEM", meta);
			temp3 = new ProductOperator(meta);
			temp3.add(temp2);
			temp3.add(temp);
			temp = temp3;
			temp2 = new SelectOperator(new Filter("S_SUPPKEY", "E", "L_SUPPKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("S_NATIONKEY", "E", "N_NATIONKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("N_NAME", "E", "'SAUDI ARABIA'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("O_ORDERKEY", "E", "L_ORDERKEY"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("O_ORDERSTATUS", "E", "'F'"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("L_RECEIPTDATE", "G", "L_COMMITDATE"), meta);
			temp2.add(temp);
			temp = temp2;
			HashSet<HashMap<Filter, Filter>> hshm = new HashSet<HashMap<Filter, Filter>>();
			HashMap<Filter, Filter> hm = new HashMap<Filter, Filter>();
			Filter f = new Filter("L_ORDERKEY", "E", "L_ORDERKEY2");
			hm.put(f, f);
			hshm.add(hm);
			f = new Filter("L_SUPPKEY", "NE", "L_SUPPKEY2");
			hm = new HashMap<Filter, Filter>();
			hm.put(f,  f);
			hshm.add(hm);
			temp2 = new SemiJoinOperator(hshm, meta);
			temp2.add(temp);
			temp2.add(subquery1);
			temp = temp2;
			hshm = new HashSet<HashMap<Filter, Filter>>();
			hm = new HashMap<Filter, Filter>();
			f = new Filter("L_ORDERKEY", "E", "L_ORDERKEY3");
			hm.put(f, f);
			hshm.add(hm);
			f = new Filter("L_SUPPKEY", "NE", "L_SUPPKEY3");
			hm = new HashMap<Filter, Filter>();
			hm.put(f,  f);
			hshm.add(hm);
			temp2 = new AntiJoinOperator(hshm, meta);
			temp2.add(temp);
			temp2.add(subquery2);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("S_NAME");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("S_NAME");
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new CountOperator("NUMWAIT", meta));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("NUMWAIT");
			vStr.add("S_NAME");
			vBool = new ArrayList<Boolean>();
			vBool.add(false);
			vBool.add(true);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new TopOperator(100, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("S_NAME");
			vStr.add("NUMWAIT");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		if (i == 22)
		{
			temp = new TableScanOperator("TPCH", "CUSTOMER", meta);
			temp2 = new SelectOperator(new Filter("C_ACCTBAL", "G", "0.0"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SubstringOperator("C_PHONE", 0, 2, "_E1", meta);
			temp2.add(temp);
			temp = temp2;
			ArrayList<Filter> vFilter = new ArrayList<Filter>();
			vFilter.add(new Filter("_E1", "E", "'13'"));
			vFilter.add(new Filter("_E1", "E", "'31'"));
			vFilter.add(new Filter("_E1", "E", "'23'"));
			vFilter.add(new Filter("_E1", "E", "'29'"));
			vFilter.add(new Filter("_E1", "E", "'30'"));
			vFilter.add(new Filter("_E1", "E", "'18'"));
			vFilter.add(new Filter("_E1", "E", "'17'"));
			temp2 = new SelectOperator(vFilter, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("C_ACCTBAL");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new AvgOperator("C_ACCTBAL", "_E2", meta));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			Operator subquery1 = temp2;
			temp = new TableScanOperator("TPCH", "ORDERS", meta);
			vStr = new ArrayList<String>();
			vStr.add("O_CUSTKEY");
			temp2 = new ProjectOperator(vStr, meta);
			temp2.add(temp);
			Operator subquery2 = temp2;
			temp = new TableScanOperator("TPCH", "CUSTOMER", meta);
			temp2 = new ProductOperator(meta);
			temp2.add(subquery1);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SubstringOperator("C_PHONE", 0, 2, "CNTRYCODE", meta);
			temp2.add(temp);
			temp = temp2;
			vFilter = new ArrayList<Filter>();
			vFilter.add(new Filter("CNTRYCODE", "E", "'13'"));
			vFilter.add(new Filter("CNTRYCODE", "E", "'31'"));
			vFilter.add(new Filter("CNTRYCODE", "E", "'23'"));
			vFilter.add(new Filter("CNTRYCODE", "E", "'29'"));
			vFilter.add(new Filter("CNTRYCODE", "E", "'30'"));
			vFilter.add(new Filter("CNTRYCODE", "E", "'18'"));
			vFilter.add(new Filter("CNTRYCODE", "E", "'17'"));
			temp2 = new SelectOperator(vFilter, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new SelectOperator(new Filter("C_ACCTBAL", "G", "_E2"), meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new AntiJoinOperator("C_CUSTKEY", meta);
			temp2.add(temp);
			temp2.add(subquery2);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("CNTRYCODE");
			vStr.add("C_ACCTBAL");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("CNTRYCODE");
			vOp = new ArrayList<AggregateOperator>();
			vOp.add(new CountOperator("NUMCUST", meta));
			vOp.add(new SumOperator("C_ACCTBAL", "TOTACCTBAL", meta, false));
			temp2 = new MultiOperator(vOp, vStr, meta, false);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("CNTRYCODE");
			vBool = new ArrayList<Boolean>();
			vBool.add(true);
			temp2 = new SortOperator(vStr, vBool, meta);
			temp2.add(temp);
			temp = temp2;
			vStr = new ArrayList<String>();
			vStr.add("CNTRYCODE");
			vStr.add("NUMCUST");
			vStr.add("TOTACCTBAL");
			temp2 = new ReorderOperator(vStr, meta);
			temp2.add(temp);
			temp = temp2;
			temp2 = new RootOperator(meta.generateCard(temp), meta);
			temp2.add(temp);
			return (RootOperator)temp2;
		}
		else
		{
			throw new Exception("Unknown query number.");
		}
	}
}
